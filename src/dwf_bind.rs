/* automatically generated by rust-bindgen 0.68.1 */

pub type HDWF = ::std::os::raw::c_int;
pub const hdwfNone: HDWF = 0;
pub type ENUMFILTER = ::std::os::raw::c_int;
pub const enumfilterAll: ENUMFILTER = 0;
pub const enumfilterType: ENUMFILTER = 134217728;
pub const enumfilterUSB: ENUMFILTER = 1;
pub const enumfilterNetwork: ENUMFILTER = 2;
pub const enumfilterAXI: ENUMFILTER = 4;
pub const enumfilterRemote: ENUMFILTER = 16777216;
pub const enumfilterAudio: ENUMFILTER = 33554432;
pub const enumfilterDemo: ENUMFILTER = 67108864;
pub type DEVID = ::std::os::raw::c_int;
pub const devidEExplorer: DEVID = 1;
pub const devidDiscovery: DEVID = 2;
pub const devidDiscovery2: DEVID = 3;
pub const devidDDiscovery: DEVID = 4;
pub const devidADP3X50: DEVID = 6;
pub const devidEclypse: DEVID = 7;
pub const devidADP5250: DEVID = 8;
pub const devidDPS3340: DEVID = 9;
pub type DEVVER = ::std::os::raw::c_int;
pub const devverEExplorerC: DEVVER = 2;
pub const devverEExplorerE: DEVVER = 4;
pub const devverEExplorerF: DEVVER = 5;
pub const devverDiscoveryA: DEVVER = 1;
pub const devverDiscoveryB: DEVVER = 2;
pub const devverDiscoveryC: DEVVER = 3;
pub type TRIGSRC = ::std::os::raw::c_uchar;
pub const trigsrcNone: TRIGSRC = 0;
pub const trigsrcPC: TRIGSRC = 1;
pub const trigsrcDetectorAnalogIn: TRIGSRC = 2;
pub const trigsrcDetectorDigitalIn: TRIGSRC = 3;
pub const trigsrcAnalogIn: TRIGSRC = 4;
pub const trigsrcDigitalIn: TRIGSRC = 5;
pub const trigsrcDigitalOut: TRIGSRC = 6;
pub const trigsrcAnalogOut1: TRIGSRC = 7;
pub const trigsrcAnalogOut2: TRIGSRC = 8;
pub const trigsrcAnalogOut3: TRIGSRC = 9;
pub const trigsrcAnalogOut4: TRIGSRC = 10;
pub const trigsrcExternal1: TRIGSRC = 11;
pub const trigsrcExternal2: TRIGSRC = 12;
pub const trigsrcExternal3: TRIGSRC = 13;
pub const trigsrcExternal4: TRIGSRC = 14;
pub const trigsrcHigh: TRIGSRC = 15;
pub const trigsrcLow: TRIGSRC = 16;
pub const trigsrcClock: TRIGSRC = 17;
pub type DwfState = ::std::os::raw::c_uchar;
pub const DwfStateReady: DwfState = 0;
pub const DwfStateConfig: DwfState = 4;
pub const DwfStatePrefill: DwfState = 5;
pub const DwfStateArmed: DwfState = 1;
pub const DwfStateWait: DwfState = 7;
pub const DwfStateTriggered: DwfState = 3;
pub const DwfStateRunning: DwfState = 3;
pub const DwfStateDone: DwfState = 2;
pub type DwfEnumConfigInfo = ::std::os::raw::c_int;
pub const DECIAnalogInChannelCount: DwfEnumConfigInfo = 1;
pub const DECIAnalogOutChannelCount: DwfEnumConfigInfo = 2;
pub const DECIAnalogIOChannelCount: DwfEnumConfigInfo = 3;
pub const DECIDigitalInChannelCount: DwfEnumConfigInfo = 4;
pub const DECIDigitalOutChannelCount: DwfEnumConfigInfo = 5;
pub const DECIDigitalIOChannelCount: DwfEnumConfigInfo = 6;
pub const DECIAnalogInBufferSize: DwfEnumConfigInfo = 7;
pub const DECIAnalogOutBufferSize: DwfEnumConfigInfo = 8;
pub const DECIDigitalInBufferSize: DwfEnumConfigInfo = 9;
pub const DECIDigitalOutBufferSize: DwfEnumConfigInfo = 10;
pub type ACQMODE = ::std::os::raw::c_int;
pub const acqmodeSingle: ACQMODE = 0;
pub const acqmodeScanShift: ACQMODE = 1;
pub const acqmodeScanScreen: ACQMODE = 2;
pub const acqmodeRecord: ACQMODE = 3;
pub const acqmodeOvers: ACQMODE = 4;
pub const acqmodeSingle1: ACQMODE = 5;
pub type FILTER = ::std::os::raw::c_int;
pub const filterDecimate: FILTER = 0;
pub const filterAverage: FILTER = 1;
pub const filterMinMax: FILTER = 2;
pub const filterAverageFit: FILTER = 3;
pub type TRIGTYPE = ::std::os::raw::c_int;
pub const trigtypeEdge: TRIGTYPE = 0;
pub const trigtypePulse: TRIGTYPE = 1;
pub const trigtypeTransition: TRIGTYPE = 2;
pub const trigtypeWindow: TRIGTYPE = 3;
pub type DwfTriggerSlope = ::std::os::raw::c_int;
pub const DwfTriggerSlopeRise: DwfTriggerSlope = 0;
pub const DwfTriggerSlopeFall: DwfTriggerSlope = 1;
pub const DwfTriggerSlopeEither: DwfTriggerSlope = 2;
pub type TRIGLEN = ::std::os::raw::c_int;
pub const triglenLess: TRIGLEN = 0;
pub const triglenTimeout: TRIGLEN = 1;
pub const triglenMore: TRIGLEN = 2;
pub type DWFERC = ::std::os::raw::c_int;
pub const dwfercNoErc: DWFERC = 0;
pub const dwfercUnknownError: DWFERC = 1;
pub const dwfercApiLockTimeout: DWFERC = 2;
pub const dwfercAlreadyOpened: DWFERC = 3;
pub const dwfercNotSupported: DWFERC = 4;
pub const dwfercInvalidParameter0: DWFERC = 16;
pub const dwfercInvalidParameter1: DWFERC = 17;
pub const dwfercInvalidParameter2: DWFERC = 18;
pub const dwfercInvalidParameter3: DWFERC = 19;
pub const dwfercInvalidParameter4: DWFERC = 20;
pub type FUNC = ::std::os::raw::c_uchar;
pub const funcDC: FUNC = 0;
pub const funcSine: FUNC = 1;
pub const funcSquare: FUNC = 2;
pub const funcTriangle: FUNC = 3;
pub const funcRampUp: FUNC = 4;
pub const funcRampDown: FUNC = 5;
pub const funcNoise: FUNC = 6;
pub const funcPulse: FUNC = 7;
pub const funcTrapezium: FUNC = 8;
pub const funcSinePower: FUNC = 9;
pub const funcCustomPattern: FUNC = 28;
pub const funcPlayPattern: FUNC = 29;
pub const funcCustom: FUNC = 30;
pub const funcPlay: FUNC = 31;
pub const funcAnalogIn1: FUNC = 64;
pub const funcAnalogIn2: FUNC = 65;
pub const funcAnalogIn3: FUNC = 66;
pub const funcAnalogIn4: FUNC = 67;
pub const funcAnalogIn5: FUNC = 68;
pub const funcAnalogIn6: FUNC = 69;
pub const funcAnalogIn7: FUNC = 70;
pub const funcAnalogIn8: FUNC = 71;
pub const funcAnalogIn9: FUNC = 72;
pub const funcAnalogIn10: FUNC = 73;
pub const funcAnalogIn11: FUNC = 74;
pub const funcAnalogIn12: FUNC = 75;
pub const funcAnalogIn13: FUNC = 76;
pub const funcAnalogIn14: FUNC = 77;
pub const funcAnalogIn15: FUNC = 78;
pub const funcAnalogIn16: FUNC = 79;
pub type ANALOGIO = ::std::os::raw::c_uchar;
pub const analogioEnable: ANALOGIO = 1;
pub const analogioVoltage: ANALOGIO = 2;
pub const analogioCurrent: ANALOGIO = 3;
pub const analogioPower: ANALOGIO = 4;
pub const analogioTemperature: ANALOGIO = 5;
pub const analogioDmm: ANALOGIO = 6;
pub const analogioRange: ANALOGIO = 7;
pub const analogioMeasure: ANALOGIO = 8;
pub const analogioTime: ANALOGIO = 9;
pub const analogioFrequency: ANALOGIO = 10;
pub const analogioResistance: ANALOGIO = 11;
pub const analogioSlew: ANALOGIO = 12;
pub type DwfDmm = ::std::os::raw::c_int;
pub const DwfDmmResistance: DwfDmm = 1;
pub const DwfDmmContinuity: DwfDmm = 2;
pub const DwfDmmDiode: DwfDmm = 3;
pub const DwfDmmDCVoltage: DwfDmm = 4;
pub const DwfDmmACVoltage: DwfDmm = 5;
pub const DwfDmmDCCurrent: DwfDmm = 6;
pub const DwfDmmACCurrent: DwfDmm = 7;
pub const DwfDmmDCLowCurrent: DwfDmm = 8;
pub const DwfDmmACLowCurrent: DwfDmm = 9;
pub const DwfDmmTemperature: DwfDmm = 10;
pub type AnalogOutNode = ::std::os::raw::c_int;
pub const AnalogOutNodeCarrier: AnalogOutNode = 0;
pub const AnalogOutNodeFM: AnalogOutNode = 1;
pub const AnalogOutNodeAM: AnalogOutNode = 2;
pub type DwfAnalogOutMode = ::std::os::raw::c_int;
pub const DwfAnalogOutModeVoltage: DwfAnalogOutMode = 0;
pub const DwfAnalogOutModeCurrent: DwfAnalogOutMode = 1;
pub type DwfAnalogOutIdle = ::std::os::raw::c_int;
pub const DwfAnalogOutIdleDisable: DwfAnalogOutIdle = 0;
pub const DwfAnalogOutIdleOffset: DwfAnalogOutIdle = 1;
pub const DwfAnalogOutIdleInitial: DwfAnalogOutIdle = 2;
pub type DwfDigitalInClockSource = ::std::os::raw::c_int;
pub const DwfDigitalInClockSourceInternal: DwfDigitalInClockSource = 0;
pub const DwfDigitalInClockSourceExternal: DwfDigitalInClockSource = 1;
pub const DwfDigitalInClockSourceExternal2: DwfDigitalInClockSource = 2;
pub type DwfDigitalInSampleMode = ::std::os::raw::c_int;
pub const DwfDigitalInSampleModeSimple: DwfDigitalInSampleMode = 0;
pub const DwfDigitalInSampleModeNoise: DwfDigitalInSampleMode = 1;
pub type DwfDigitalOutOutput = ::std::os::raw::c_int;
pub const DwfDigitalOutOutputPushPull: DwfDigitalOutOutput = 0;
pub const DwfDigitalOutOutputOpenDrain: DwfDigitalOutOutput = 1;
pub const DwfDigitalOutOutputOpenSource: DwfDigitalOutOutput = 2;
pub const DwfDigitalOutOutputThreeState: DwfDigitalOutOutput = 3;
pub type DwfDigitalOutType = ::std::os::raw::c_int;
pub const DwfDigitalOutTypePulse: DwfDigitalOutType = 0;
pub const DwfDigitalOutTypeCustom: DwfDigitalOutType = 1;
pub const DwfDigitalOutTypeRandom: DwfDigitalOutType = 2;
pub const DwfDigitalOutTypeROM: DwfDigitalOutType = 3;
pub const DwfDigitalOutTypeState: DwfDigitalOutType = 4;
pub const DwfDigitalOutTypePlay: DwfDigitalOutType = 5;
pub type DwfDigitalOutIdle = ::std::os::raw::c_int;
pub const DwfDigitalOutIdleInit: DwfDigitalOutIdle = 0;
pub const DwfDigitalOutIdleLow: DwfDigitalOutIdle = 1;
pub const DwfDigitalOutIdleHigh: DwfDigitalOutIdle = 2;
pub const DwfDigitalOutIdleZet: DwfDigitalOutIdle = 3;
pub type DwfAnalogImpedance = ::std::os::raw::c_int;
pub const DwfAnalogImpedanceImpedance: DwfAnalogImpedance = 0;
pub const DwfAnalogImpedanceImpedancePhase: DwfAnalogImpedance = 1;
pub const DwfAnalogImpedanceResistance: DwfAnalogImpedance = 2;
pub const DwfAnalogImpedanceReactance: DwfAnalogImpedance = 3;
pub const DwfAnalogImpedanceAdmittance: DwfAnalogImpedance = 4;
pub const DwfAnalogImpedanceAdmittancePhase: DwfAnalogImpedance = 5;
pub const DwfAnalogImpedanceConductance: DwfAnalogImpedance = 6;
pub const DwfAnalogImpedanceSusceptance: DwfAnalogImpedance = 7;
pub const DwfAnalogImpedanceSeriesCapacitance: DwfAnalogImpedance = 8;
pub const DwfAnalogImpedanceParallelCapacitance: DwfAnalogImpedance = 9;
pub const DwfAnalogImpedanceSeriesInductance: DwfAnalogImpedance = 10;
pub const DwfAnalogImpedanceParallelInductance: DwfAnalogImpedance = 11;
pub const DwfAnalogImpedanceDissipation: DwfAnalogImpedance = 12;
pub const DwfAnalogImpedanceQuality: DwfAnalogImpedance = 13;
pub const DwfAnalogImpedanceVrms: DwfAnalogImpedance = 14;
pub const DwfAnalogImpedanceVreal: DwfAnalogImpedance = 15;
pub const DwfAnalogImpedanceVimag: DwfAnalogImpedance = 16;
pub const DwfAnalogImpedanceIrms: DwfAnalogImpedance = 17;
pub const DwfAnalogImpedanceIreal: DwfAnalogImpedance = 18;
pub const DwfAnalogImpedanceIimag: DwfAnalogImpedance = 19;
pub type DwfParam = ::std::os::raw::c_int;
pub const DwfParamUsbPower: DwfParam = 2;
pub const DwfParamLedBrightness: DwfParam = 3;
pub const DwfParamOnClose: DwfParam = 4;
pub const DwfParamAudioOut: DwfParam = 5;
pub const DwfParamUsbLimit: DwfParam = 6;
pub const DwfParamAnalogOut: DwfParam = 7;
pub const DwfParamFrequency: DwfParam = 8;
pub const DwfParamExtFreq: DwfParam = 9;
pub const DwfParamClockMode: DwfParam = 10;
pub const DwfParamTempLimit: DwfParam = 11;
pub const DwfParamFreqPhase: DwfParam = 12;
pub type DwfWindow = ::std::os::raw::c_int;
pub const DwfWindowRectangular: DwfWindow = 0;
pub const DwfWindowTriangular: DwfWindow = 1;
pub const DwfWindowHamming: DwfWindow = 2;
pub const DwfWindowHann: DwfWindow = 3;
pub const DwfWindowCosine: DwfWindow = 4;
pub const DwfWindowBlackmanHarris: DwfWindow = 5;
pub const DwfWindowFlatTop: DwfWindow = 6;
pub const DwfWindowKaiser: DwfWindow = 7;
pub type DwfAnalogCoupling = ::std::os::raw::c_int;
pub const DwfAnalogCouplingDC: DwfAnalogCoupling = 0;
pub const DwfAnalogCouplingAC: DwfAnalogCoupling = 1;
extern "C" {
    pub fn FDwfGetLastError(pdwferc: *mut DWFERC) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfGetLastErrorMsg(szError: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfGetVersion(szVersion: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfParamSet(param: DwfParam, value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfParamGet(
        param: DwfParam,
        pvalue: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfEnum(
        enumfilter: ENUMFILTER,
        pcDevice: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfEnumStart(enumfilter: ENUMFILTER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfEnumStop(pcDevice: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfEnumInfo(
        idxDevice: ::std::os::raw::c_int,
        szOpt: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfEnumDeviceType(
        idxDevice: ::std::os::raw::c_int,
        pDeviceId: *mut DEVID,
        pDeviceRevision: *mut DEVVER,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfEnumDeviceIsOpened(
        idxDevice: ::std::os::raw::c_int,
        pfIsUsed: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfEnumUserName(
        idxDevice: ::std::os::raw::c_int,
        szUserName: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfEnumDeviceName(
        idxDevice: ::std::os::raw::c_int,
        szDeviceName: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfEnumSN(
        idxDevice: ::std::os::raw::c_int,
        szSN: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfEnumConfig(
        idxDevice: ::std::os::raw::c_int,
        pcConfig: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfEnumConfigInfo(
        idxConfig: ::std::os::raw::c_int,
        info: DwfEnumConfigInfo,
        pv: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDeviceOpen(
        idxDevice: ::std::os::raw::c_int,
        phdwf: *mut HDWF,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDeviceOpenEx(
        szOpt: *const ::std::os::raw::c_char,
        phdwf: *mut HDWF,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDeviceConfigOpen(
        idxDev: ::std::os::raw::c_int,
        idxCfg: ::std::os::raw::c_int,
        phdwf: *mut HDWF,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDeviceClose(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDeviceCloseAll() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDeviceAutoConfigureSet(
        hdwf: HDWF,
        fAutoConfigure: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDeviceAutoConfigureGet(
        hdwf: HDWF,
        pfAutoConfigure: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDeviceReset(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDeviceEnableSet(hdwf: HDWF, fEnable: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDeviceTriggerInfo(
        hdwf: HDWF,
        pfstrigsrc: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDeviceTriggerSet(
        hdwf: HDWF,
        idxPin: ::std::os::raw::c_int,
        trigsrc: TRIGSRC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDeviceTriggerGet(
        hdwf: HDWF,
        idxPin: ::std::os::raw::c_int,
        ptrigsrc: *mut TRIGSRC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDeviceTriggerPC(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDeviceTriggerSlopeInfo(
        hdwf: HDWF,
        pfsslope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDeviceParamSet(
        hdwf: HDWF,
        param: DwfParam,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDeviceParamGet(
        hdwf: HDWF,
        param: DwfParam,
        pvalue: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInReset(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInConfigure(
        hdwf: HDWF,
        fReconfigure: ::std::os::raw::c_int,
        fStart: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerForce(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInStatus(
        hdwf: HDWF,
        fReadData: ::std::os::raw::c_int,
        psts: *mut DwfState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInStatusSamplesLeft(
        hdwf: HDWF,
        pcSamplesLeft: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInStatusSamplesValid(
        hdwf: HDWF,
        pcSamplesValid: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInStatusIndexWrite(
        hdwf: HDWF,
        pidxWrite: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInStatusAutoTriggered(
        hdwf: HDWF,
        pfAuto: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInStatusData(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        rgdVoltData: *mut f64,
        cdData: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInStatusData2(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        rgdVoltData: *mut f64,
        idxData: ::std::os::raw::c_int,
        cdData: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInStatusData16(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        rgu16Data: *mut ::std::os::raw::c_short,
        idxData: ::std::os::raw::c_int,
        cdData: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInStatusNoise(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        rgdMin: *mut f64,
        rgdMax: *mut f64,
        cdData: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInStatusNoise2(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        rgdMin: *mut f64,
        rgdMax: *mut f64,
        idxData: ::std::os::raw::c_int,
        cdData: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInStatusSample(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pdVoltSample: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInStatusTime(
        hdwf: HDWF,
        psecUtc: *mut ::std::os::raw::c_uint,
        ptick: *mut ::std::os::raw::c_uint,
        pticksPerSecond: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInStatusRecord(
        hdwf: HDWF,
        pcdDataAvailable: *mut ::std::os::raw::c_int,
        pcdDataLost: *mut ::std::os::raw::c_int,
        pcdDataCorrupt: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInRecordLengthSet(hdwf: HDWF, sLength: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInRecordLengthGet(hdwf: HDWF, psLength: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInCounterInfo(
        hdwf: HDWF,
        pcntMax: *mut f64,
        psecMax: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInCounterSet(hdwf: HDWF, sec: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInCounterGet(hdwf: HDWF, psec: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInCounterStatus(
        hdwf: HDWF,
        pcnt: *mut f64,
        pfreq: *mut f64,
        ptick: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInFrequencyInfo(
        hdwf: HDWF,
        phzMin: *mut f64,
        phzMax: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInFrequencySet(hdwf: HDWF, hzFrequency: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInFrequencyGet(hdwf: HDWF, phzFrequency: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInBitsInfo(
        hdwf: HDWF,
        pnBits: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInBufferSizeInfo(
        hdwf: HDWF,
        pnSizeMin: *mut ::std::os::raw::c_int,
        pnSizeMax: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInBufferSizeSet(
        hdwf: HDWF,
        nSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInBufferSizeGet(
        hdwf: HDWF,
        pnSize: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInNoiseSizeInfo(
        hdwf: HDWF,
        pnSizeMax: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInNoiseSizeSet(
        hdwf: HDWF,
        nSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInNoiseSizeGet(
        hdwf: HDWF,
        pnSize: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInAcquisitionModeInfo(
        hdwf: HDWF,
        pfsacqmode: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInAcquisitionModeSet(hdwf: HDWF, acqmode: ACQMODE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInAcquisitionModeGet(
        hdwf: HDWF,
        pacqmode: *mut ACQMODE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelCount(
        hdwf: HDWF,
        pcChannel: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelCounts(
        hdwf: HDWF,
        pcReal: *mut ::std::os::raw::c_int,
        pcFilter: *mut ::std::os::raw::c_int,
        pcTotal: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelEnableSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        fEnable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelEnableGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pfEnable: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelFilterInfo(
        hdwf: HDWF,
        pfsfilter: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelFilterSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        filter: FILTER,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelFilterGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pfilter: *mut FILTER,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelRangeInfo(
        hdwf: HDWF,
        pvoltsMin: *mut f64,
        pvoltsMax: *mut f64,
        pnSteps: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelRangeSteps(
        hdwf: HDWF,
        rgVoltsStep: *mut f64,
        pnSteps: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelRangeSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        voltsRange: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelRangeGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pvoltsRange: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelOffsetInfo(
        hdwf: HDWF,
        pvoltsMin: *mut f64,
        pvoltsMax: *mut f64,
        pnSteps: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelOffsetSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        voltOffset: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelOffsetGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pvoltOffset: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelAttenuationSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        xAttenuation: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelAttenuationGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pxAttenuation: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelBandwidthSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        hz: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelBandwidthGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        phz: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelImpedanceSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        ohms: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelImpedanceGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pOhms: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelCouplingInfo(
        hdwf: HDWF,
        pfscoupling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelCouplingSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        coupling: DwfAnalogCoupling,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInChannelCouplingGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pcoupling: *mut DwfAnalogCoupling,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerSourceSet(hdwf: HDWF, trigsrc: TRIGSRC) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerSourceGet(
        hdwf: HDWF,
        ptrigsrc: *mut TRIGSRC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerPositionInfo(
        hdwf: HDWF,
        psecMin: *mut f64,
        psecMax: *mut f64,
        pnSteps: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerPositionSet(hdwf: HDWF, secPosition: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerPositionGet(
        hdwf: HDWF,
        psecPosition: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerPositionStatus(
        hdwf: HDWF,
        psecPosition: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerAutoTimeoutInfo(
        hdwf: HDWF,
        psecMin: *mut f64,
        psecMax: *mut f64,
        pnSteps: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerAutoTimeoutSet(hdwf: HDWF, secTimeout: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerAutoTimeoutGet(
        hdwf: HDWF,
        psecTimeout: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerHoldOffInfo(
        hdwf: HDWF,
        psecMin: *mut f64,
        psecMax: *mut f64,
        pnStep: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerHoldOffSet(hdwf: HDWF, secHoldOff: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerHoldOffGet(
        hdwf: HDWF,
        psecHoldOff: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerTypeInfo(
        hdwf: HDWF,
        pfstrigtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerTypeSet(hdwf: HDWF, trigtype: TRIGTYPE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerTypeGet(
        hdwf: HDWF,
        ptrigtype: *mut TRIGTYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerChannelInfo(
        hdwf: HDWF,
        pidxMin: *mut ::std::os::raw::c_int,
        pidxMax: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerChannelSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerChannelGet(
        hdwf: HDWF,
        pidxChannel: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerFilterInfo(
        hdwf: HDWF,
        pfsfilter: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerFilterSet(hdwf: HDWF, filter: FILTER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerFilterGet(hdwf: HDWF, pfilter: *mut FILTER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerLevelInfo(
        hdwf: HDWF,
        pvoltsMin: *mut f64,
        pvoltsMax: *mut f64,
        pnSteps: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerLevelSet(hdwf: HDWF, voltsLevel: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerLevelGet(hdwf: HDWF, pvoltsLevel: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerHysteresisInfo(
        hdwf: HDWF,
        pvoltsMin: *mut f64,
        pvoltsMax: *mut f64,
        pnSteps: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerHysteresisSet(hdwf: HDWF, voltsLevel: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerHysteresisGet(
        hdwf: HDWF,
        pvoltsHysteresis: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerConditionInfo(
        hdwf: HDWF,
        pfstrigcond: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerConditionSet(
        hdwf: HDWF,
        trigcond: DwfTriggerSlope,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerConditionGet(
        hdwf: HDWF,
        ptrigcond: *mut DwfTriggerSlope,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerLengthInfo(
        hdwf: HDWF,
        psecMin: *mut f64,
        psecMax: *mut f64,
        pnSteps: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerLengthSet(hdwf: HDWF, secLength: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerLengthGet(hdwf: HDWF, psecLength: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerLengthConditionInfo(
        hdwf: HDWF,
        pfstriglen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerLengthConditionSet(
        hdwf: HDWF,
        triglen: TRIGLEN,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInTriggerLengthConditionGet(
        hdwf: HDWF,
        ptriglen: *mut TRIGLEN,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInSamplingSourceSet(hdwf: HDWF, trigsrc: TRIGSRC) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInSamplingSourceGet(
        hdwf: HDWF,
        ptrigsrc: *mut TRIGSRC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInSamplingSlopeSet(
        hdwf: HDWF,
        slope: DwfTriggerSlope,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInSamplingSlopeGet(
        hdwf: HDWF,
        pslope: *mut DwfTriggerSlope,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInSamplingDelaySet(hdwf: HDWF, sec: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogInSamplingDelayGet(hdwf: HDWF, psec: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutCount(
        hdwf: HDWF,
        pcChannel: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutMasterSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        idxMaster: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutMasterGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pidxMaster: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutTriggerSourceSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        trigsrc: TRIGSRC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutTriggerSourceGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        ptrigsrc: *mut TRIGSRC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutTriggerSlopeSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        slope: DwfTriggerSlope,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutTriggerSlopeGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pslope: *mut DwfTriggerSlope,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutRunInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        psecMin: *mut f64,
        psecMax: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutRunSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        secRun: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutRunGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        psecRun: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutRunStatus(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        psecRun: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutWaitInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        psecMin: *mut f64,
        psecMax: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutWaitSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        secWait: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutWaitGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        psecWait: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutRepeatInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pnMin: *mut ::std::os::raw::c_int,
        pnMax: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutRepeatSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        cRepeat: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutRepeatGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pcRepeat: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutRepeatStatus(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pcRepeat: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutRepeatTriggerSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        fRepeatTrigger: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutRepeatTriggerGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pfRepeatTrigger: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutLimitationInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pMin: *mut f64,
        pMax: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutLimitationSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        limit: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutLimitationGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        plimit: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutModeSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        mode: DwfAnalogOutMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutModeGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pmode: *mut DwfAnalogOutMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutIdleInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pfsidle: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutIdleSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        idle: DwfAnalogOutIdle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutIdleGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pidle: *mut DwfAnalogOutIdle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodeInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pfsnode: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodeEnableSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        fMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodeEnableGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        pfMode: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodeFunctionInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        pfsfunc: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodeFunctionSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        func: FUNC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodeFunctionGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        pfunc: *mut FUNC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodeFrequencyInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        phzMin: *mut f64,
        phzMax: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodeFrequencySet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        hzFrequency: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodeFrequencyGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        phzFrequency: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodeAmplitudeInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        pMin: *mut f64,
        pMax: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodeAmplitudeSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        vAmplitude: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodeAmplitudeGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        pvAmplitude: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodeOffsetInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        pMin: *mut f64,
        pMax: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodeOffsetSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        vOffset: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodeOffsetGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        pvOffset: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodeSymmetryInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        ppercentageMin: *mut f64,
        ppercentageMax: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodeSymmetrySet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        percentageSymmetry: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodeSymmetryGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        ppercentageSymmetry: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodePhaseInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        pdegreeMin: *mut f64,
        pdegreeMax: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodePhaseSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        degreePhase: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodePhaseGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        pdegreePhase: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodeDataInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        pnSamplesMin: *mut ::std::os::raw::c_int,
        pnSamplesMax: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodeDataSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        rgdData: *mut f64,
        cdData: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutCustomAMFMEnableSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        fEnable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutCustomAMFMEnableGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pfEnable: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutReset(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutConfigure(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        fStart: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutStatus(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        psts: *mut DwfState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodePlayStatus(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        cdDataFree: *mut ::std::os::raw::c_int,
        cdDataLost: *mut ::std::os::raw::c_int,
        cdDataCorrupted: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutNodePlayData(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        node: AnalogOutNode,
        rgdData: *mut f64,
        cdData: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogIOReset(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogIOConfigure(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogIOStatus(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogIOEnableInfo(
        hdwf: HDWF,
        pfSet: *mut ::std::os::raw::c_int,
        pfStatus: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogIOEnableSet(
        hdwf: HDWF,
        fMasterEnable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogIOEnableGet(
        hdwf: HDWF,
        pfMasterEnable: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogIOEnableStatus(
        hdwf: HDWF,
        pfMasterEnable: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogIOChannelCount(
        hdwf: HDWF,
        pnChannel: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogIOChannelName(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        szName: *mut ::std::os::raw::c_char,
        szLabel: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogIOChannelInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pnNodes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogIOChannelNodeName(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        idxNode: ::std::os::raw::c_int,
        szNodeName: *mut ::std::os::raw::c_char,
        szNodeUnits: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogIOChannelNodeInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        idxNode: ::std::os::raw::c_int,
        panalogio: *mut ANALOGIO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogIOChannelNodeSetInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        idxNode: ::std::os::raw::c_int,
        pmin: *mut f64,
        pmax: *mut f64,
        pnSteps: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogIOChannelNodeSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        idxNode: ::std::os::raw::c_int,
        value: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogIOChannelNodeGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        idxNode: ::std::os::raw::c_int,
        pvalue: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogIOChannelNodeStatusInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        idxNode: ::std::os::raw::c_int,
        pmin: *mut f64,
        pmax: *mut f64,
        pnSteps: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogIOChannelNodeStatus(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        idxNode: ::std::os::raw::c_int,
        pvalue: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOReset(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOConfigure(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOStatus(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOOutputEnableInfo(
        hdwf: HDWF,
        pfsOutputEnableMask: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOOutputEnableSet(
        hdwf: HDWF,
        fsOutputEnable: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOOutputEnableGet(
        hdwf: HDWF,
        pfsOutputEnable: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOOutputInfo(
        hdwf: HDWF,
        pfsOutputMask: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOOutputSet(
        hdwf: HDWF,
        fsOutput: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOOutputGet(
        hdwf: HDWF,
        pfsOutput: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOPullInfo(
        hdwf: HDWF,
        pfsUp: *mut ::std::os::raw::c_uint,
        pfsDown: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOPullSet(
        hdwf: HDWF,
        fsUp: ::std::os::raw::c_uint,
        fsDown: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOPullGet(
        hdwf: HDWF,
        pfsUp: *mut ::std::os::raw::c_uint,
        pfsDown: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIODriveInfo(
        hdwf: HDWF,
        channel: ::std::os::raw::c_int,
        ampMin: *mut f64,
        ampMax: *mut f64,
        ampSteps: *mut ::std::os::raw::c_int,
        pslewSteps: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIODriveSet(
        hdwf: HDWF,
        channel: ::std::os::raw::c_int,
        amp: f64,
        slew: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIODriveGet(
        hdwf: HDWF,
        channel: ::std::os::raw::c_int,
        pamp: *mut f64,
        pslew: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOInputInfo(
        hdwf: HDWF,
        pfsInputMask: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOInputStatus(
        hdwf: HDWF,
        pfsInput: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOOutputEnableInfo64(
        hdwf: HDWF,
        pfsOutputEnableMask: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOOutputEnableSet64(
        hdwf: HDWF,
        fsOutputEnable: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOOutputEnableGet64(
        hdwf: HDWF,
        pfsOutputEnable: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOOutputInfo64(
        hdwf: HDWF,
        pfsOutputMask: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOOutputSet64(
        hdwf: HDWF,
        fsOutput: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOOutputGet64(
        hdwf: HDWF,
        pfsOutput: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOInputInfo64(
        hdwf: HDWF,
        pfsInputMask: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalIOInputStatus64(
        hdwf: HDWF,
        pfsInput: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInReset(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInConfigure(
        hdwf: HDWF,
        fReconfigure: ::std::os::raw::c_int,
        fStart: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInStatus(
        hdwf: HDWF,
        fReadData: ::std::os::raw::c_int,
        psts: *mut DwfState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInStatusSamplesLeft(
        hdwf: HDWF,
        pcSamplesLeft: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInStatusSamplesValid(
        hdwf: HDWF,
        pcSamplesValid: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInStatusIndexWrite(
        hdwf: HDWF,
        pidxWrite: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInStatusAutoTriggered(
        hdwf: HDWF,
        pfAuto: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInStatusData(
        hdwf: HDWF,
        rgData: *mut ::std::os::raw::c_void,
        countOfDataBytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInStatusData2(
        hdwf: HDWF,
        rgData: *mut ::std::os::raw::c_void,
        idxSample: ::std::os::raw::c_int,
        countOfDataBytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInStatusNoise2(
        hdwf: HDWF,
        rgData: *mut ::std::os::raw::c_void,
        idxSample: ::std::os::raw::c_int,
        countOfDataBytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInStatusRecord(
        hdwf: HDWF,
        pcdDataAvailable: *mut ::std::os::raw::c_int,
        pcdDataLost: *mut ::std::os::raw::c_int,
        pcdDataCorrupt: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInStatusCompress(
        hdwf: HDWF,
        pcdDataAvailable: *mut ::std::os::raw::c_int,
        pcdDataLost: *mut ::std::os::raw::c_int,
        pcdDataCorrupt: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInStatusCompressed(
        hdwf: HDWF,
        rgData: *mut ::std::os::raw::c_void,
        countOfBytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInStatusCompressed2(
        hdwf: HDWF,
        rgData: *mut ::std::os::raw::c_void,
        idxSample: ::std::os::raw::c_int,
        countOfBytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInStatusTime(
        hdwf: HDWF,
        psecUtc: *mut ::std::os::raw::c_uint,
        ptick: *mut ::std::os::raw::c_uint,
        pticksPerSecond: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInCounterInfo(
        hdwf: HDWF,
        pcntMax: *mut f64,
        psecMax: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInCounterSet(hdwf: HDWF, sec: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInCounterGet(hdwf: HDWF, psec: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInCounterStatus(
        hdwf: HDWF,
        pcnt: *mut f64,
        pfreq: *mut f64,
        ptick: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInInternalClockInfo(hdwf: HDWF, phzFreq: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInClockSourceInfo(
        hdwf: HDWF,
        pfsDwfDigitalInClockSource: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInClockSourceSet(
        hdwf: HDWF,
        v: DwfDigitalInClockSource,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInClockSourceGet(
        hdwf: HDWF,
        pv: *mut DwfDigitalInClockSource,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInDividerInfo(
        hdwf: HDWF,
        pdivMax: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInDividerSet(
        hdwf: HDWF,
        div: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInDividerGet(
        hdwf: HDWF,
        pdiv: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInBitsInfo(
        hdwf: HDWF,
        pnBits: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInSampleFormatSet(
        hdwf: HDWF,
        nBits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInSampleFormatGet(
        hdwf: HDWF,
        pnBits: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInInputOrderSet(
        hdwf: HDWF,
        fDioFirst: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInBufferSizeInfo(
        hdwf: HDWF,
        pnSizeMax: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInBufferSizeSet(
        hdwf: HDWF,
        nSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInBufferSizeGet(
        hdwf: HDWF,
        pnSize: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInSampleModeInfo(
        hdwf: HDWF,
        pfsDwfDigitalInSampleMode: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInSampleModeSet(
        hdwf: HDWF,
        v: DwfDigitalInSampleMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInSampleModeGet(
        hdwf: HDWF,
        pv: *mut DwfDigitalInSampleMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInSampleSensibleSet(
        hdwf: HDWF,
        fs: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInSampleSensibleGet(
        hdwf: HDWF,
        pfs: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInAcquisitionModeInfo(
        hdwf: HDWF,
        pfsacqmode: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInAcquisitionModeSet(hdwf: HDWF, acqmode: ACQMODE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInAcquisitionModeGet(
        hdwf: HDWF,
        pacqmode: *mut ACQMODE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInTriggerSourceSet(hdwf: HDWF, trigsrc: TRIGSRC) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInTriggerSourceGet(
        hdwf: HDWF,
        ptrigsrc: *mut TRIGSRC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInTriggerSlopeSet(
        hdwf: HDWF,
        slope: DwfTriggerSlope,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInTriggerSlopeGet(
        hdwf: HDWF,
        pslope: *mut DwfTriggerSlope,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInTriggerPositionInfo(
        hdwf: HDWF,
        pnSamplesAfterTriggerMax: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInTriggerPositionSet(
        hdwf: HDWF,
        cSamplesAfterTrigger: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInTriggerPositionGet(
        hdwf: HDWF,
        pcSamplesAfterTrigger: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInTriggerPrefillSet(
        hdwf: HDWF,
        cSamplesBeforeTrigger: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInTriggerPrefillGet(
        hdwf: HDWF,
        pcSamplesBeforeTrigger: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInTriggerAutoTimeoutInfo(
        hdwf: HDWF,
        psecMin: *mut f64,
        psecMax: *mut f64,
        pnSteps: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInTriggerAutoTimeoutSet(hdwf: HDWF, secTimeout: f64)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInTriggerAutoTimeoutGet(
        hdwf: HDWF,
        psecTimeout: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInTriggerInfo(
        hdwf: HDWF,
        pfsLevelLow: *mut ::std::os::raw::c_uint,
        pfsLevelHigh: *mut ::std::os::raw::c_uint,
        pfsEdgeRise: *mut ::std::os::raw::c_uint,
        pfsEdgeFall: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInTriggerSet(
        hdwf: HDWF,
        fsLevelLow: ::std::os::raw::c_uint,
        fsLevelHigh: ::std::os::raw::c_uint,
        fsEdgeRise: ::std::os::raw::c_uint,
        fsEdgeFall: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInTriggerGet(
        hdwf: HDWF,
        pfsLevelLow: *mut ::std::os::raw::c_uint,
        pfsLevelHigh: *mut ::std::os::raw::c_uint,
        pfsEdgeRise: *mut ::std::os::raw::c_uint,
        pfsEdgeFall: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInTriggerResetSet(
        hdwf: HDWF,
        fsLevelLow: ::std::os::raw::c_uint,
        fsLevelHigh: ::std::os::raw::c_uint,
        fsEdgeRise: ::std::os::raw::c_uint,
        fsEdgeFall: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInTriggerCountSet(
        hdwf: HDWF,
        cCount: ::std::os::raw::c_int,
        fRestart: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInTriggerLengthSet(
        hdwf: HDWF,
        secMin: f64,
        secMax: f64,
        idxSync: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInTriggerMatchSet(
        hdwf: HDWF,
        iPin: ::std::os::raw::c_int,
        fsMask: ::std::os::raw::c_uint,
        fsValue: ::std::os::raw::c_uint,
        cBitStuffing: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutReset(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutConfigure(
        hdwf: HDWF,
        fStart: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutStatus(hdwf: HDWF, psts: *mut DwfState) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutStatusOutput(
        hdwf: HDWF,
        pfsValue: *mut ::std::os::raw::c_uint,
        pfsEnable: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutInternalClockInfo(hdwf: HDWF, phzFreq: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutTriggerSourceSet(hdwf: HDWF, trigsrc: TRIGSRC) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutTriggerSourceGet(
        hdwf: HDWF,
        ptrigsrc: *mut TRIGSRC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutRunInfo(
        hdwf: HDWF,
        psecMin: *mut f64,
        psecMax: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutRunSet(hdwf: HDWF, secRun: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutRunGet(hdwf: HDWF, psecRun: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutRunStatus(hdwf: HDWF, psecRun: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutWaitInfo(
        hdwf: HDWF,
        psecMin: *mut f64,
        psecMax: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutWaitSet(hdwf: HDWF, secWait: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutWaitGet(hdwf: HDWF, psecWait: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutRepeatInfo(
        hdwf: HDWF,
        pnMin: *mut ::std::os::raw::c_uint,
        pnMax: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutRepeatSet(
        hdwf: HDWF,
        cRepeat: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutRepeatGet(
        hdwf: HDWF,
        pcRepeat: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutRepeatStatus(
        hdwf: HDWF,
        pcRepeat: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutTriggerSlopeSet(
        hdwf: HDWF,
        slope: DwfTriggerSlope,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutTriggerSlopeGet(
        hdwf: HDWF,
        pslope: *mut DwfTriggerSlope,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutRepeatTriggerSet(
        hdwf: HDWF,
        fRepeatTrigger: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutRepeatTriggerGet(
        hdwf: HDWF,
        pfRepeatTrigger: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutCount(
        hdwf: HDWF,
        pcChannel: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutEnableSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        fEnable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutEnableGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pfEnable: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutOutputInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pfsDwfDigitalOutOutput: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutOutputSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        v: DwfDigitalOutOutput,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutOutputGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pv: *mut DwfDigitalOutOutput,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutTypeInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pfsDwfDigitalOutType: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutTypeSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        v: DwfDigitalOutType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutTypeGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pv: *mut DwfDigitalOutType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutIdleInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pfsDwfDigitalOutIdle: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutIdleSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        v: DwfDigitalOutIdle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutIdleGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pv: *mut DwfDigitalOutIdle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutDividerInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        vMin: *mut ::std::os::raw::c_uint,
        vMax: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutDividerInitSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        v: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutDividerInitGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pv: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutDividerSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        v: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutDividerGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pv: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutCounterInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        vMin: *mut ::std::os::raw::c_uint,
        vMax: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutCounterInitSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        fHigh: ::std::os::raw::c_int,
        v: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutCounterInitGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pfHigh: *mut ::std::os::raw::c_int,
        pv: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutCounterSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        vLow: ::std::os::raw::c_uint,
        vHigh: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutCounterGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pvLow: *mut ::std::os::raw::c_uint,
        pvHigh: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutRepetitionInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pnMax: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutRepetitionSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        cRepeat: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutRepetitionGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pcRepeat: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutDataInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pcountOfBitsMax: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutDataSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        rgBits: *mut ::std::os::raw::c_void,
        countOfBits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutPlayDataSet(
        hdwf: HDWF,
        rgBits: *mut ::std::os::raw::c_uchar,
        bitPerSample: ::std::os::raw::c_uint,
        countOfSamples: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutPlayUpdateSet(
        hdwf: HDWF,
        rgBits: *mut ::std::os::raw::c_uchar,
        indexOfSample: ::std::os::raw::c_uint,
        countOfSamples: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutPlayRateSet(hdwf: HDWF, hzRate: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalUartReset(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalUartRateSet(hdwf: HDWF, hz: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalUartBitsSet(
        hdwf: HDWF,
        cBits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalUartParitySet(
        hdwf: HDWF,
        parity: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalUartPolaritySet(
        hdwf: HDWF,
        polarity: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalUartStopSet(hdwf: HDWF, cBit: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalUartTxSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalUartRxSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalUartTx(
        hdwf: HDWF,
        szTx: *mut ::std::os::raw::c_char,
        cTx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalUartRx(
        hdwf: HDWF,
        szRx: *mut ::std::os::raw::c_char,
        cRx: ::std::os::raw::c_int,
        pcRx: *mut ::std::os::raw::c_int,
        pParity: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiReset(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiFrequencySet(hdwf: HDWF, hz: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiClockSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiDataSet(
        hdwf: HDWF,
        idxDQ: ::std::os::raw::c_int,
        idxChannel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiIdleSet(
        hdwf: HDWF,
        idxDQ: ::std::os::raw::c_int,
        idle: DwfDigitalOutIdle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiModeSet(hdwf: HDWF, iMode: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiOrderSet(
        hdwf: HDWF,
        fMSBFirst: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiDelaySet(
        hdwf: HDWF,
        cStart: ::std::os::raw::c_int,
        cCmd: ::std::os::raw::c_int,
        cWord: ::std::os::raw::c_int,
        cStop: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiSelectSet(
        hdwf: HDWF,
        idxSelect: ::std::os::raw::c_int,
        fIdle: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiSelect(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        level: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiWriteRead(
        hdwf: HDWF,
        cDQ: ::std::os::raw::c_int,
        cBitPerWord: ::std::os::raw::c_int,
        rgTX: *mut ::std::os::raw::c_uchar,
        cTX: ::std::os::raw::c_int,
        rgRX: *mut ::std::os::raw::c_uchar,
        cRX: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiWriteRead16(
        hdwf: HDWF,
        cDQ: ::std::os::raw::c_int,
        cBitPerWord: ::std::os::raw::c_int,
        rgTX: *mut ::std::os::raw::c_ushort,
        cTX: ::std::os::raw::c_int,
        rgRX: *mut ::std::os::raw::c_ushort,
        cRX: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiWriteRead32(
        hdwf: HDWF,
        cDQ: ::std::os::raw::c_int,
        cBitPerWord: ::std::os::raw::c_int,
        rgTX: *mut ::std::os::raw::c_uint,
        cTX: ::std::os::raw::c_int,
        rgRX: *mut ::std::os::raw::c_uint,
        cRX: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiRead(
        hdwf: HDWF,
        cDQ: ::std::os::raw::c_int,
        cBitPerWord: ::std::os::raw::c_int,
        rgRX: *mut ::std::os::raw::c_uchar,
        cRX: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiReadOne(
        hdwf: HDWF,
        cDQ: ::std::os::raw::c_int,
        cBitPerWord: ::std::os::raw::c_int,
        pRX: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiRead16(
        hdwf: HDWF,
        cDQ: ::std::os::raw::c_int,
        cBitPerWord: ::std::os::raw::c_int,
        rgRX: *mut ::std::os::raw::c_ushort,
        cRX: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiRead32(
        hdwf: HDWF,
        cDQ: ::std::os::raw::c_int,
        cBitPerWord: ::std::os::raw::c_int,
        rgRX: *mut ::std::os::raw::c_uint,
        cRX: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiWrite(
        hdwf: HDWF,
        cDQ: ::std::os::raw::c_int,
        cBitPerWord: ::std::os::raw::c_int,
        rgTX: *mut ::std::os::raw::c_uchar,
        cTX: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiWriteOne(
        hdwf: HDWF,
        cDQ: ::std::os::raw::c_int,
        cBits: ::std::os::raw::c_int,
        vTX: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiWrite16(
        hdwf: HDWF,
        cDQ: ::std::os::raw::c_int,
        cBitPerWord: ::std::os::raw::c_int,
        rgTX: *mut ::std::os::raw::c_ushort,
        cTX: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiWrite32(
        hdwf: HDWF,
        cDQ: ::std::os::raw::c_int,
        cBitPerWord: ::std::os::raw::c_int,
        rgTX: *mut ::std::os::raw::c_uint,
        cTX: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiCmdWriteRead(
        hdwf: HDWF,
        cBitCmd: ::std::os::raw::c_int,
        cmd: ::std::os::raw::c_uint,
        cDummy: ::std::os::raw::c_int,
        cDQ: ::std::os::raw::c_int,
        cBitPerWord: ::std::os::raw::c_int,
        rgTX: *mut ::std::os::raw::c_uchar,
        cTX: ::std::os::raw::c_int,
        rgRX: *mut ::std::os::raw::c_uchar,
        cRX: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiCmdWriteRead16(
        hdwf: HDWF,
        cBitCmd: ::std::os::raw::c_int,
        cmd: ::std::os::raw::c_uint,
        cDummy: ::std::os::raw::c_int,
        cDQ: ::std::os::raw::c_int,
        cBitPerWord: ::std::os::raw::c_int,
        rgTX: *mut ::std::os::raw::c_ushort,
        cTX: ::std::os::raw::c_int,
        rgRX: *mut ::std::os::raw::c_ushort,
        cRX: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiCmdWriteRead32(
        hdwf: HDWF,
        cBitCmd: ::std::os::raw::c_int,
        cmd: ::std::os::raw::c_uint,
        cDummy: ::std::os::raw::c_int,
        cDQ: ::std::os::raw::c_int,
        cBitPerWord: ::std::os::raw::c_int,
        rgTX: *mut ::std::os::raw::c_uint,
        cTX: ::std::os::raw::c_int,
        rgRX: *mut ::std::os::raw::c_uint,
        cRX: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiCmdRead(
        hdwf: HDWF,
        cBitCmd: ::std::os::raw::c_int,
        cmd: ::std::os::raw::c_uint,
        cDummy: ::std::os::raw::c_int,
        cDQ: ::std::os::raw::c_int,
        cBitPerWord: ::std::os::raw::c_int,
        rgRX: *mut ::std::os::raw::c_uchar,
        cRX: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiCmdReadOne(
        hdwf: HDWF,
        cBitCmd: ::std::os::raw::c_int,
        cmd: ::std::os::raw::c_uint,
        cDummy: ::std::os::raw::c_int,
        cDQ: ::std::os::raw::c_int,
        cBitPerWord: ::std::os::raw::c_int,
        pRX: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiCmdRead16(
        hdwf: HDWF,
        cBitCmd: ::std::os::raw::c_int,
        cmd: ::std::os::raw::c_uint,
        cDummy: ::std::os::raw::c_int,
        cDQ: ::std::os::raw::c_int,
        cBitPerWord: ::std::os::raw::c_int,
        rgRX: *mut ::std::os::raw::c_ushort,
        cRX: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiCmdRead32(
        hdwf: HDWF,
        cBitCmd: ::std::os::raw::c_int,
        cmd: ::std::os::raw::c_uint,
        cDummy: ::std::os::raw::c_int,
        cDQ: ::std::os::raw::c_int,
        cBitPerWord: ::std::os::raw::c_int,
        rgRX: *mut ::std::os::raw::c_uint,
        cRX: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiCmdWrite(
        hdwf: HDWF,
        cBitCmd: ::std::os::raw::c_int,
        cmd: ::std::os::raw::c_uint,
        cDummy: ::std::os::raw::c_int,
        cDQ: ::std::os::raw::c_int,
        cBitPerWord: ::std::os::raw::c_int,
        rgTX: *mut ::std::os::raw::c_uchar,
        cTX: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiCmdWriteOne(
        hdwf: HDWF,
        cBitCmd: ::std::os::raw::c_int,
        cmd: ::std::os::raw::c_uint,
        cDummy: ::std::os::raw::c_int,
        cDQ: ::std::os::raw::c_int,
        cBits: ::std::os::raw::c_int,
        vTX: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiCmdWrite16(
        hdwf: HDWF,
        cBitCmd: ::std::os::raw::c_int,
        cmd: ::std::os::raw::c_uint,
        cDummy: ::std::os::raw::c_int,
        cDQ: ::std::os::raw::c_int,
        cBitPerWord: ::std::os::raw::c_int,
        rgTX: *mut ::std::os::raw::c_ushort,
        cTX: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSpiCmdWrite32(
        hdwf: HDWF,
        cBitCmd: ::std::os::raw::c_int,
        cmd: ::std::os::raw::c_uint,
        cDummy: ::std::os::raw::c_int,
        cDQ: ::std::os::raw::c_int,
        cBitPerWord: ::std::os::raw::c_int,
        rgTX: *mut ::std::os::raw::c_uint,
        cTX: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalI2cReset(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalI2cClear(
        hdwf: HDWF,
        pfFree: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalI2cStretchSet(
        hdwf: HDWF,
        fEnable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalI2cRateSet(hdwf: HDWF, hz: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalI2cReadNakSet(
        hdwf: HDWF,
        fNakLastReadByte: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalI2cSclSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalI2cSdaSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalI2cTimeoutSet(hdwf: HDWF, sec: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalI2cWriteRead(
        hdwf: HDWF,
        adr8bits: ::std::os::raw::c_uchar,
        rgbTx: *mut ::std::os::raw::c_uchar,
        cTx: ::std::os::raw::c_int,
        rgRx: *mut ::std::os::raw::c_uchar,
        cRx: ::std::os::raw::c_int,
        pNak: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalI2cRead(
        hdwf: HDWF,
        adr8bits: ::std::os::raw::c_uchar,
        rgbRx: *mut ::std::os::raw::c_uchar,
        cRx: ::std::os::raw::c_int,
        pNak: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalI2cWrite(
        hdwf: HDWF,
        adr8bits: ::std::os::raw::c_uchar,
        rgbTx: *mut ::std::os::raw::c_uchar,
        cTx: ::std::os::raw::c_int,
        pNak: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalI2cWriteOne(
        hdwf: HDWF,
        adr8bits: ::std::os::raw::c_uchar,
        bTx: ::std::os::raw::c_uchar,
        pNak: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalI2cSpyStart(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalI2cSpyStatus(
        hdwf: HDWF,
        fStart: *mut ::std::os::raw::c_int,
        fStop: *mut ::std::os::raw::c_int,
        rgData: *mut ::std::os::raw::c_uchar,
        cData: *mut ::std::os::raw::c_int,
        iNak: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalCanReset(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalCanRateSet(hdwf: HDWF, hz: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalCanPolaritySet(
        hdwf: HDWF,
        fHigh: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalCanTxSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalCanRxSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalCanTx(
        hdwf: HDWF,
        vID: ::std::os::raw::c_int,
        fExtended: ::std::os::raw::c_int,
        fRemote: ::std::os::raw::c_int,
        cDLC: ::std::os::raw::c_int,
        rgTX: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalCanRx(
        hdwf: HDWF,
        pvID: *mut ::std::os::raw::c_int,
        pfExtended: *mut ::std::os::raw::c_int,
        pfRemote: *mut ::std::os::raw::c_int,
        pcDLC: *mut ::std::os::raw::c_int,
        rgRX: *mut ::std::os::raw::c_uchar,
        cRX: ::std::os::raw::c_int,
        pvStatus: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSwdReset(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSwdRateSet(hdwf: HDWF, hz: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSwdCkSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSwdIoSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSwdTurnSet(hdwf: HDWF, cTurn: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSwdTrailSet(
        hdwf: HDWF,
        cTrail: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSwdParkSet(
        hdwf: HDWF,
        fDrive: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSwdNakSet(
        hdwf: HDWF,
        fContinue: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSwdIoIdleSet(
        hdwf: HDWF,
        fHigh: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSwdClear(
        hdwf: HDWF,
        cReset: ::std::os::raw::c_int,
        cTrail: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSwdWrite(
        hdwf: HDWF,
        APnDP: ::std::os::raw::c_int,
        A32: ::std::os::raw::c_int,
        pAck: *mut ::std::os::raw::c_int,
        Write: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalSwdRead(
        hdwf: HDWF,
        APnDP: ::std::os::raw::c_int,
        A32: ::std::os::raw::c_int,
        pAck: *mut ::std::os::raw::c_int,
        pRead: *mut ::std::os::raw::c_uint,
        pCrc: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceReset(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceModeSet(
        hdwf: HDWF,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceModeGet(
        hdwf: HDWF,
        mode: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceReferenceSet(hdwf: HDWF, ohms: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceReferenceGet(hdwf: HDWF, pohms: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceFrequencySet(hdwf: HDWF, hz: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceFrequencyGet(hdwf: HDWF, phz: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceAmplitudeSet(hdwf: HDWF, volts: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceAmplitudeGet(hdwf: HDWF, pvolts: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceOffsetSet(hdwf: HDWF, volts: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceOffsetGet(hdwf: HDWF, pvolts: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceProbeSet(
        hdwf: HDWF,
        ohmRes: f64,
        faradCap: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceProbeGet(
        hdwf: HDWF,
        pohmRes: *mut f64,
        pfaradCap: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedancePeriodSet(
        hdwf: HDWF,
        cMinPeriods: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedancePeriodGet(
        hdwf: HDWF,
        cMinPeriods: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceCompReset(hdwf: HDWF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceCompSet(
        hdwf: HDWF,
        ohmOpenResistance: f64,
        ohmOpenReactance: f64,
        ohmShortResistance: f64,
        ohmShortReactance: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceCompGet(
        hdwf: HDWF,
        pohmOpenResistance: *mut f64,
        pohmOpenReactance: *mut f64,
        pohmShortResistance: *mut f64,
        pohmShortReactance: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceConfigure(
        hdwf: HDWF,
        fStart: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceStatus(hdwf: HDWF, psts: *mut DwfState) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceStatusInput(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pgain: *mut f64,
        pradian: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceStatusWarning(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pWarning: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogImpedanceStatusMeasure(
        hdwf: HDWF,
        measure: DwfAnalogImpedance,
        pvalue: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfSpectrumWindow(
        rgdWin: *mut f64,
        cdWin: ::std::os::raw::c_int,
        iWindow: DwfWindow,
        vBeta: f64,
        vNEBW: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfSpectrumFFT(
        rgdData: *const f64,
        cdData: ::std::os::raw::c_int,
        rgdBin: *mut f64,
        rgdPhase: *mut f64,
        cdBin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfSpectrumTransform(
        rgdData: *const f64,
        cdData: ::std::os::raw::c_int,
        rgdBin: *mut f64,
        rgdPhase: *mut f64,
        cdBin: ::std::os::raw::c_int,
        iFirst: f64,
        iLast: f64,
    ) -> ::std::os::raw::c_int;
}
pub const DwfParamKeepOnClose: DwfParam = 1;
extern "C" {
    pub fn FDwfDigitalInMixedSet(
        hdwf: HDWF,
        fEnable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type TRIGCOND = ::std::os::raw::c_int;
pub const trigcondRisingPositive: TRIGCOND = 0;
pub const trigcondFallingNegative: TRIGCOND = 1;
extern "C" {
    pub fn FDwfAnalogInTriggerSourceInfo(
        hdwf: HDWF,
        pfstrigsrc: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutTriggerSourceInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pfstrigsrc: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalInTriggerSourceInfo(
        hdwf: HDWF,
        pfstrigsrc: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfDigitalOutTriggerSourceInfo(
        hdwf: HDWF,
        pfstrigsrc: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type STS = ::std::os::raw::c_uchar;
pub const stsRdy: STS = 0;
pub const stsArm: STS = 1;
pub const stsDone: STS = 2;
pub const stsTrig: STS = 3;
pub const stsCfg: STS = 4;
pub const stsPrefill: STS = 5;
pub const stsNotDone: STS = 6;
pub const stsTrigDly: STS = 7;
pub const stsError: STS = 8;
pub const stsBusy: STS = 9;
pub const stsStop: STS = 10;
extern "C" {
    pub fn FDwfAnalogOutEnableSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        fEnable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutEnableGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pfEnable: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutFunctionInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pfsfunc: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutFunctionSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        func: FUNC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutFunctionGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pfunc: *mut FUNC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutFrequencyInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        phzMin: *mut f64,
        phzMax: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutFrequencySet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        hzFrequency: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutFrequencyGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        phzFrequency: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutAmplitudeInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pvoltsMin: *mut f64,
        pvoltsMax: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutAmplitudeSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        voltsAmplitude: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutAmplitudeGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pvoltsAmplitude: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutOffsetInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pvoltsMin: *mut f64,
        pvoltsMax: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutOffsetSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        voltsOffset: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutOffsetGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pvoltsOffset: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutSymmetryInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        ppercentageMin: *mut f64,
        ppercentageMax: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutSymmetrySet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        percentageSymmetry: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutSymmetryGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        ppercentageSymmetry: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutPhaseInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pdegreeMin: *mut f64,
        pdegreeMax: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutPhaseSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        degreePhase: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutPhaseGet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pdegreePhase: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutDataInfo(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        pnSamplesMin: *mut ::std::os::raw::c_int,
        pnSamplesMax: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutDataSet(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        rgdData: *mut f64,
        cdData: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutPlayStatus(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        cdDataFree: *mut ::std::os::raw::c_int,
        cdDataLost: *mut ::std::os::raw::c_int,
        cdDataCorrupted: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfAnalogOutPlayData(
        hdwf: HDWF,
        idxChannel: ::std::os::raw::c_int,
        rgdData: *mut f64,
        cdData: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfEnumAnalogInChannels(
        idxDevice: ::std::os::raw::c_int,
        pnChannels: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfEnumAnalogInBufferSize(
        idxDevice: ::std::os::raw::c_int,
        pnBufferSize: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfEnumAnalogInBits(
        idxDevice: ::std::os::raw::c_int,
        pnBits: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FDwfEnumAnalogInFrequency(
        idxDevice: ::std::os::raw::c_int,
        phzFrequency: *mut f64,
    ) -> ::std::os::raw::c_int;
}
pub const enumfilterEExplorer: ENUMFILTER = 1;
pub const enumfilterDiscovery: ENUMFILTER = 2;
pub const enumfilterDiscovery2: ENUMFILTER = 3;
pub const enumfilterDDiscovery: ENUMFILTER = 4;
